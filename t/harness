=head1 NAME

t/harness - A testing harness for Eclectus

=head1 SYNOPSIS

  cd languages/eclectus && perl t/harness

  cd languages/eclectus && perl t/harness --verbose t/pmc/boolean.t

=head1 DESCRIPTION

A harness based on Test::Harness and Test::Harness::Archive.

=cut

# pragmata
use strict;
use warnings;
use FindBin ();
use lib "$FindBin::Bin/../../../lib", "$FindBin::Bin/../lib";

use Cwd                     ();
use File::Spec              ();
use TAP::Harness            3.12;     # support closures for the 'exec' option
use TAP::Harness::Archive   0.12;
use Parrot::Config          qw( %PConfig );
use Getopt::Long;
use Parrot::Harness::Smoke;
use Parrot::Test;

my ( $send_to_smolder_flag, $archive_flag, $verbose_flag );
GetOptions(
    'send-to-smolder' => \$send_to_smolder_flag,
    'archive'         => \$archive_flag,
    'verbose'         => \$verbose_flag,
);

my $verbosity = $verbose_flag ? 1 : $ENV{HARNESS_VERBOSE};
$verbosity ||= 0;

{
    my $path_to_parrot = Parrot::Test::path_to_parrot();

    my @files;
    if ( scalar(@ARGV) ) {
        # Someone specified tests for me to run.
        @files = grep { -f $_ } @ARGV
    }
    else {
        ( undef, undef, my $current_dir ) = File::Spec->splitpath( Cwd::getcwd() );
        @files = glob( File::Spec->catfile( 't', '*/*.t' ) );
    }

    my $exec_sub
        = sub {
              my ( $harness, $test_file ) = @_;


              # the directory t/pmc contains only PIR test files
              return [ "$path_to_parrot/parrot$PConfig{exe}", $test_file ] if $test_file =~ m!t/pmc/.*[.]t$!;

              # the directory t/scheme contains only test scripts written in scheme
              if ( $test_file =~ m!t/in_php/.*[.]t$! ) {
                  if ($^O eq 'MSWin32') {
                      return [ 'csi', '-R', 'alexpander', '-i', '-k', 'none', '-I', 'riaxpander',
                               '-e', '(load "chicken/prelude.scm")', '-s', $test_file ];
                  }
                  else {
                      return [ 'gosh', '-fcase-fold', '-I', '.', '-I', 'riaxpander',
                               '-l', 'gauche/prelude.scm', $test_file ];
                  }
              }

              # all other directories contain test scripts written in Perl
              return [ $PConfig{perl}, $test_file ];
          };
    if ( $archive_flag ) {
        my %env_data = Parrot::Harness::Smoke::collect_test_environment_data();
 
        my $report_file = ['eclectus_test_run.tar.gz'];
        my $harness = TAP::Harness::Archive->new(
            {
                exec             => $exec_sub,
                verbosity        => $verbosity,
                archive          => $report_file->[0],
                merge            => 1,
                extra_properties => \%env_data,
            }
        );
        $harness->runtests(@files);

        if ( $send_to_smolder_flag ) {
            $env_data{report_file} = $report_file;
            $env_data{project_id}  = 13;
            Parrot::Harness::Smoke::send_archive_to_smolder(%env_data);
        }
    } else {
       my $harness = TAP::Harness->new(
           {
               exec       => $exec_sub,
               verbosity  => $verbosity,
           }
       );
        $harness->runtests(@files);
    }
}

=head1 SEE ALSO

  F<languages/pipp/t/harness>

=head1 AUTHOR

Bernhard Schmalhofer - <Bernhard.Schmalhofer@gmx.de>

=cut

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4:
